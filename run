#!/usr/bin/env python3

import math
import pygame
import random

# config options
(width, height) = (1750, 1200)
bg_color = (125,125,125)
ball_color = (235,109,125)
guideline_color = (255,255,255)
guideline_thickness = 5
num_balls = 10
(ball_min_rad, ball_max_rad) = (35,115)
ball_max_speed = 1.25
ball_thickness = 3
ball_elasticity = 0.55
ball_drag = 0.001

class Ball:
    def __init__(self, pos, size):
        (self.x, self.y) = pos
        self.size = size
        self.colour = ball_color
        self.thickness = ball_thickness

        self.speed = 1
        self.angle = 0

        self.asleep = False

    def move(self, dt=1):
        # skip if asleep
        if self.asleep:
            return

        # update position
        self.x += math.sin(self.angle) * self.speed * dt
        self.y += math.cos(self.angle) * self.speed * dt

        # apply gravity
        gravity = (0, 0.02)
        (self.angle, self.speed) = add_vectors((self.angle, self.speed), gravity)

        # apply drag
        self.speed *= (1-ball_drag)

        # bounce if necessary
        self.bounce()

        # check if it should sleep
        if self.speed <= 0.01 and (height - (self.y + self.size)) < 5:
            self.asleep = True

    def bounce(self):
        if self.x < self.size:
            self.angle = - self.angle
            self.x = 2 * self.size - self.x
            self.speed *= ball_elasticity
        elif self.x > width - self.size:
            self.angle = 2*math.pi - self.angle
            self.x = 2 * (width - self.size) - self.x
            self.speed *= ball_elasticity

        if self.y < self.size:
            self.angle = math.pi - self.angle
            self.y = 2 * self.size - self.y
            self.speed *= ball_elasticity
        elif self.y > height - self.size:
            self.angle = - self.angle + math.pi
            self.y = 2 * (height - self.size) - self.y
            self.speed *= ball_elasticity

    def display(self, screen):
        # draw inside
        pygame.draw.circle(screen, self.colour, (int(self.x), int(self.y)), self.size, 0)

        # draw outside
        pygame.draw.circle(screen, (0,0,0), (int(self.x), int(self.y)), self.size, self.thickness)

    def overlaps(self, ball):
        (x1,x2) = self.x, ball.x
        (y1,y2) = self.y, ball.y
        distance = math.sqrt((x1-x2)**2 + (y1-y2)**2)
        return distance <= ball.size + self.size

    def contains_point(self, x, y):
        return math.sqrt((x-self.x)**2 + (y-self.y)**2) <= self.size

    def toggle_pause(self):
        self.asleep = not self.asleep

def add_vectors(v1, v2, dt=1):
    (angle1, length1) = v1
    (angle2, length2) = v2
    x = math.sin(angle1) * length1 + math.sin(angle2) * length2
    y = math.cos(angle1) * length1 + math.cos(angle2) * length2

    new_length = math.hypot(x, y)
    new_angle = math.pi/2 - math.atan2(y,x)
    return (new_angle, new_length)

def generate_ball():
    size = random.randint(ball_min_rad, ball_max_rad)
    x = random.randint(size, width-size)
    y = random.randint(size, height-size)

    ball = Ball((x,y), size)
    ball.speed = random.uniform(0, ball_max_speed)
    ball.angle = random.uniform(0, 2*math.pi)

    return ball

def disjoint(balls, ball):
    for other in balls:
        if ball.overlaps(other):
            return False
    return True

def get_containing_ball(balls, mouse_x, mouse_y):
    for ball in balls:
        if ball.contains_point(mouse_x, mouse_y):
            return ball
    return None

def program_exited():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return True
    return False

def clear(screen):
    screen.fill(bg_color)

def main():
    # set up the screen
    screen = pygame.display.set_mode((width, height))
    clock = pygame.time.Clock()
    selected_ball = None
    pygame.display.set_caption("BaBounce")
    clear(screen)

    # generate random balls
    balls = []
    for n in range(num_balls):
        ball = generate_ball()
        while not disjoint(balls, ball):
            ball = generate_ball()
        balls.append(ball)

    # run the program
    while True:
        # check events
        for event in pygame.event.get():
            # quit
            if event.type == pygame.QUIT:
                exit()

            # mouse click
            elif event.type == pygame.MOUSEBUTTONDOWN:
                (mouse_x, mouse_y) = pygame.mouse.get_pos()
                selected_ball = get_containing_ball(balls, mouse_x, mouse_y)

            # mouse release
            elif event.type == pygame.MOUSEBUTTONUP:
                selected_ball = None

        # update the balls
        dt = clock.tick(60)
        for ball in balls:
            if selected_ball == ball:
                # ball selected - do not move until no longer selected
                ball.asleep = False
                (new_x, new_y) = pygame.mouse.get_pos()
                throw_length = math.sqrt((ball.x - new_x)**2 + (ball.y - new_y)**2)
                throw_angle = math.acos((new_x - ball.x)/throw_length)

                # update ball speed and angle based on new mouse position
                ball.speed = throw_length * 0.01
                ball.angle = throw_angle + math.pi/2
            else:
                # move if the ball is not selected
                ball.move(dt)

        # clear the screen
        clear(screen)

        # draw the balls
        for ball in balls:
            ball.display(screen)

        # draw the guideline, if needed
        if selected_ball != None:
            ball_pos = (selected_ball.x, selected_ball.y)
            mouse_pos = pygame.mouse.get_pos()
            pygame.draw.line(screen, guideline_color, ball_pos, mouse_pos, guideline_thickness)

        # show everything
        pygame.display.flip()

if __name__ == "__main__":
    main()
