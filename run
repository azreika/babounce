#!/usr/bin/env python3

import pygame
import random
import math

# config options
(width, height) = (1750, 1200);
bg_color = (125,125,125)
ball_color = (235,109,125)
num_balls = 10
(ball_min_rad, ball_max_rad) = (35,115)
ball_max_speed = 2
ball_thickness = 3

class Ball:
    def __init__(self, pos, size):
        (self.x, self.y) = pos
        self.size = size
        self.colour = ball_color
        self.thickness = ball_thickness

        self.speed = 1
        self.angle = 0

    def move(self):
        # update position
        self.x += math.sin(self.angle) * self.speed
        self.y += math.cos(self.angle) * self.speed

        # bounce if necessary
        self.bounce()

    def bounce(self):
        if self.x < self.size:
            self.angle = - self.angle
        elif self.x > width - self.size:
            self.angle = 2*math.pi - self.angle

        if self.y < self.size:
            self.angle = math.pi - self.angle
        elif self.y > height - self.size:
            self.angle = - self.angle + math.pi

    def display(self, screen):
        # draw inside
        pygame.draw.circle(screen, self.colour, (int(self.x), int(self.y)), self.size, 0)

        # draw outside
        pygame.draw.circle(screen, (0,0,0), (int(self.x), int(self.y)), self.size, self.thickness)

    def overlaps(self, ball):
        (x1,x2) = self.x, ball.x
        (y1,y2) = self.y, ball.y
        distance = math.sqrt((x1-x2)**2 + (y1-y2)**2)
        return distance <= ball.size + self.size

def generate_ball():
    size = random.randint(ball_min_rad, ball_max_rad)
    x = random.randint(size, width-size)
    y = random.randint(size, height-size)

    ball = Ball((x,y), size)
    ball.speed = random.uniform(0, ball_max_speed)
    ball.angle = random.uniform(0, 2*math.pi)

    return ball

def disjoint(balls, ball):
    for other in balls:
        if ball.overlaps(other):
            return False
    return True

def program_exited():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return True
    return False

def clear(screen):
    screen.fill(bg_color)

def main():
    # set up the screen
    screen = pygame.display.set_mode((width, height))
    pygame.display.set_caption("BaBounce")
    clear(screen)

    # generate random balls
    balls = []
    for n in range(num_balls):
        ball = generate_ball()
        while not disjoint(balls, ball):
            ball = generate_ball()
        balls.append(ball)

    # run the program
    while True:
        # check if we have to quit
        if program_exited():
            break

        # update the balls
        for ball in balls:
            ball.move()

        # clear the screen
        clear(screen)

        # draw the balls
        for ball in balls:
            ball.display(screen)

        # show everything
        pygame.display.flip()

if __name__ == "__main__":
    main()
